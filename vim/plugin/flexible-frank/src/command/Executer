" vim:set ft=vim:
python <<EOM

def dump():
	print frank
	e = frank.findOneByCursor()
	e._dump()

def Dump():
	print frank
	frank.dump()

@Output
def Reload():
	global frank
	frank = Frank(pathStacks[-1])

@Output
def PointOn():
	e = frank.findOneByCursor()
	e.pointOn()

@Output
def PointOff():
	e = frank.findOneByCursor()
	e.pointOff()

@Output
def MoveUp():
	upperPath = os.path.abspath(os.path.join(pathStacks[-1], '..'))
	pathStacks.append(upperPath)
	global frank
	frank = Frank(upperPath)

@Output
def MovePrev():
	if len(pathStacks) != 1:
		pathStacks.pop()
	prevPath = pathStacks[-1]
	global frank
	frank = Frank(prevPath)

@ForbiddenTarget(file)
@Output
def ChangeDir():
	global frank
	e = frank.findOneByCursor()
	changePath = e.path.value
	pathStacks.append(changePath)
	frank = Frank(changePath)

@RestoreCursor
@Output
@ReNumbering
def FoldOn():
	e = frank.findOneByCursor()
	e.foldOn()

@RestoreCursor
@Output
@ReNumbering
def FoldOff():
	e = frank.findOneByCursor()
	e.foldOff()

@RestoreCursor
@Output
@ReNumbering
def RecFoldOn():
	e = frank.findOneByCursor()
	e.recFoldOn()

@RestoreCursor
@Output
@ReNumbering
def RecFoldOff():
	e = frank.findOneByCursor()
	e.recFoldOff()

@RestoreCursor
@Output
@ReNumbering
def AllFoldOn():
	es = frank.getNodeSubs()
	[e.recFoldOn() for e in es]

@RestoreCursor
@Output
@ReNumbering
def AllFoldOff():
	es = frank.getNodeSubs()
	[e.recFoldOff() for e in es]

@ForbiddenTarget(dir)
def Edit():
	es = frank.getPointedEntries()
	command = cEdit(es)
	command.do()

EOM
