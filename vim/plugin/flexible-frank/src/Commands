" vim:set ft=vim:
python <<EOM

def findOneByCursor(func):
	def _findOneByCursor():
		global e
		e = frank.findOneByCursor()
		func()
	return _findOneByCursor

def output(func):
	def _output():
		func()
		frank.output()
	return _output

def reNumbering(func):
	def _reNumbering():
		func()
		frank.reNumbering()
	return _reNumbering

def dirOnly(func):
	def _dirOnly():
		e = frank.findOneByCursor()
		if e.type.isDir():
			func()
		else:
			print 'dir only'
	return _dirOnly

@dirOnly
@findOneByCursor
@output
def ChangeDir():
	changePath = e.path.value
	pathStacks.append(changePath)
	global frank
	frank = Frank(changePath)

@findOneByCursor
def dump():
	print frank
	e._dump()

def Dump():
	print frank
	frank.dump()

def Reload():
	global frank
	frank = Frank(pathStacks[-1])

@findOneByCursor
@output
def PointOn():
	e.pointOn()

@findOneByCursor
@output
def PointOff():
	e.pointOff()

@output
def MoveUp():
	upperPath = os.path.abspath(os.path.join(pathStacks[-1], '..'))
	pathStacks.append(upperPath)
	global frank
	frank = Frank(upperPath)

@output
def MovePrev():
	if len(pathStacks) != 1:
		pathStacks.pop()
	prevPath = pathStacks[-1]
	global frank
	frank = Frank(prevPath)

@findOneByCursor
@output
@reNumbering
def FoldOn():
	e.foldOn()

@findOneByCursor
@output
@reNumbering
def FoldOff():
	e.foldOff()

@findOneByCursor
@output
@reNumbering
def RecFoldOn():
	e.recFoldOn()

@findOneByCursor
@output
@reNumbering
def RecFoldOff():
	e.recFoldOff()

@output
@reNumbering
def AllFoldOn():
	es = frank.getNodeSubs()
	[e.recFoldOn() for e in es]

@output
@reNumbering
def AllFoldOff():
	es = frank.getNodeSubs()
	[e.recFoldOff() for e in es]

EOM
