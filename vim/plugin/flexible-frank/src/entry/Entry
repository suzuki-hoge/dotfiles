" vim:set ft=vim:

python <<EOM

class Entry:

	def __init__(self, root, path):
		self.num = Num.createAndNext()
		self.path = path
		self.depth = Depth(root, path)
		self.point = Point()
		self.fold = Fold()

	def subs(self):
		return self.entries if self.type.isDir() else []

	def getOutputs(self, result):
		result.append(self._createOutput())
		if not self.fold.isOn():
			[e.getOutputs(result) for e in self.subs()]
		return result

	def pointOn(self, target):
		if self.num.isTarget(target):
			self.point.on()
		else:
			[e.pointOn(target) for e in self.subs()]

	def pointOff(self, target):
		if self.num.isTarget(target):
			self.point.off()
		else:
			[e.pointOff(target) for e in self.subs()]

	def numbering(self):
		self._createAndNext()
		if self.fold.isOn():
			[e._createNotOutput() for e in self.subs()]
		else:
			[e.numbering() for e in self.subs()]

	def _createAndNext(self):
		self.num = Num.createAndNext()

	def _createNotOutput(self):
		self.num = Num.createNotOutput()
		[e._createNotOutput() for e in self.subs()]

	def __iter__(self):
		return self._generator()

	def _generator(self):
		yield self
		for subEntry in self.subs():
			for eachSubEntry in subEntry._generator():
				yield eachSubEntry

	def dump(self):
		self._dump()
		[e.dump() for e in self.subs()]

	def _dump(self):
		print '%2d : %s' % (self.num.value, self.path.value)

EOM
