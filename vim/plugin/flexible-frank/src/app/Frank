" vim:set ft=vim:

python <<EOM

import vim
import os
import os.path

class Frank:

	def __init__(self, root):
		Num.init()
		Point.init()
		root = Path(root)
		self.node = Directory(root, root)
		self.header = self._createHeader()
		self.buffer = Buffer2()

	def _createHeader(self):
		root = self.node.path.getValue()
		return ['-' * len(root), root, '-' * len(root), '']

	def output(self):
		self.buffer.output(self.node.getOutputs([]), self.header)

	def reNumbering(self):
		Num.init()
		self.node.reNumbering()

	def _getCursorLineNum(self):
		cursorPos = Cursor.getCurrentLineNum()
		headerLen = len(self.header)

		return cursorPos - headerLen + 1

	def findOneByCursor(self):
		num = self._getCursorLineNum()

		return [e for e in self.node if e.num.isTarget(num)][0]

	def getNodeSubs(self):
		return self.node.getSubs()

	def dump(self):
		self.node.dump()

	def findPointedEntriesOrderByPath(self):
		return self.findPointedEntries(lambda e: e.path.value)

	def findPointedEntriesOrderByPoint(self):
		return self.findPointedEntries(lambda e: e.point.value)

	def findPointedEntries(self, func):
		return sorted([e for e in self.node if e.point.isOn()], key = func)

	def findListOrFindByCursor(self, func):
		es = func()
		return es if es else [self.findOneByCursor()]

EOM
