" vim:set ft=vim:

source $pete/pete/Base

source $pete/pete/Python
source $pete/pete/Shell
source $pete/pete/Vim
source $pete/pete/Scala
source $pete/pete/Html
source $pete/pete/Javascript
source $pete/pete/Css
source $pete/pete/HtmlDjango

let $PETE_COMMENT_ON     = 0
let $PETE_COMMENT_OFF    = 1
let $PETE_COMMENT_SWITCH = 2
let $PETE_RUN            = 3
let $PETE_RELOAD         = 4
let $PETE_DEBUG          = 5

augroup autocmdPete
	autocmd!
augroup END

autocmd autocmdPete BufEnter  *.scala set filetype=scala

function! PetroniusTheArbiter(mode, ...) range

let option = ''

let i = 0
for var in a:000
	if i == 0
		let option = var
	endif
	let i += 1
endfor

python <<EOM

import vim

mode      = vim.eval('a:mode')
firstLine = int(vim.eval('a:firstline'))
lastLine  = int(vim.eval('a:lastline'))
fileType  = vim.eval('&filetype')
option    = vim.eval('option')

call(mode, fileType, firstLine, lastLine, option)

EOM
endfunction

python <<EOM

def call(mode, fileType, firstLine, lastLine, option):
	pete = createPete(fileType)

	if mode == vim.eval('$PETE_COMMENT_ON'):
		pete.commentOn(firstLine, lastLine)

	elif mode == vim.eval('$PETE_COMMENT_OFF'):
		pete.commentOff(firstLine, lastLine)
	
	elif mode == vim.eval('$PETE_COMMENT_SWITCH'):
		pete.commentSwitch(firstLine, lastLine)
	
	elif mode == vim.eval('$PETE_RUN'):
		pete.run()

	elif mode == vim.eval('$PETE_RELOAD'):
		pete.browserReload()

	elif mode == vim.eval('$PETE_DEBUG'):
		pete.debug(option)
	
def createPete(fileType):
	if fileType == 'python':
		return Python()

	elif fileType == 'sh':
		return Shell()

	elif fileType == 'vim':
		return Vim()

	elif fileType == 'scala':
		return Scala()

	elif fileType == 'html':
		return Html()

	elif fileType == 'javascript':
		return Javascript()

	elif fileType == 'css':
		return Css()

	elif fileType == 'htmldjango':
		return HtmlDjango()

EOM
