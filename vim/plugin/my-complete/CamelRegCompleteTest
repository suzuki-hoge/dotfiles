" vim:set ft=vim:

python << EOM

class Case:

	def __init__(self, base, expected):
		self.base = base
		self.expected = expected

class Cases:

	def __init__(self, func):
		self.func = func
		self.cases = []

	def add(self, base, expected):
		case = Case(base, expected)
		self.cases.append(case)

	def test(self):
		for case in self.cases:
			actual = self.__test(case)
			self.__output(actual, case)

	def __output(self, actual, case):
		print '[%s] %s(%s) -> %s' % ('OK' if case.expected == actual else 'NG', self.func, case.base, actual)
		if case.expected != actual:
			print '  expected : %s\n  actual   : %s' % (case.expected, actual)

	def __test(self, case):
		return vim.eval("%s('%s')" % (self.func, case.base))

EOM



" aaaCRT
" Trans
" Transfer
function! CreateRegTest()
python << EOM

cases = Cases('CreateReg')

cases.add('service',   '^service')
cases.add('serviceE',  '^service.*E.*')
cases.add('sEL',       '^s.*E.*L.*')
cases.add('sEy',       '^s.*E.*y')
cases.add('serviEL',   '^servi.*E.*L.*')
cases.add('serviEs',   '^servi.*E.*s')
cases.add('s*vice',    '^s.*vice')
cases.add('s*vice*',   '^s.*vice.*')
cases.add('s*viceEs',  '^s.*vice.*E.*s')
cases.add('s*viceEL',  '^s.*vice.*E.*L.*')
cases.add('s*viceELt', '^s.*vice.*E.*L.*t')
cases.add('CRT',       '^C.*R.*T.*')
cases.add('Tr',        '^T.*r')

cases.test()

EOM
endfunction

"command! T wa | source $rc | call CreateRegTest2()

function! CreateRegTest2()
	let words = ['a_b_c', 'a_b_c_', '_a_b_c', '_a_b_c_', 'b_c', 'a_b', 'a_c']
	let Words = ['a_b_c', 'a_B_C', 'a_B_c', 'A_B_C', 'a_b_B_c', 'a_B_b_c']

	call s:test(words, '',      '',              words)
	call s:test(words, 'a',     '^a',            ['a_b_c', 'a_b_c_', 'a_b', 'a_c'])
	call s:test(words, 'c',     '^c',            [])
	call s:test(words, '*c',    '.*c.*',         ['a_b_c', 'a_b_c_', '_a_b_c', '_a_b_c_', 'b_c', 'a_c'])
	call s:test(words, 'c$',    '^c$',           [])
	call s:test(words, '*c$',   '.*c$',          ['a_b_c', '_a_b_c', 'b_c', 'a_c'])
	call s:test(words, 'abc',   '^a.*b.*c.*',    ['a_b_c', 'a_b_c_'])
	call s:test(words, '*abc',  '.*a.*b.*c.*',   ['a_b_c', 'a_b_c_', '_a_b_c', '_a_b_c_'])
	call s:test(words, 'abc$',  '^a.*b.*c$',     ['a_b_c'])
	call s:test(words, '*abc$', '.*a.*b.*c$',    ['a_b_c', '_a_b_c'])
	call s:test(Words, 'aBc',   '^a.*B.*c.*',    ['a_B_c'])
	call s:test(Words, 'aBC',   '^a.*B.*C.*',    ['a_B_C'])
	call s:test(Words, 'ABC',   '^A.*B.*C.*',    ['A_B_C'])
	call s:test(Words, 'abBc',  '^a.*b.*B.*c.*', ['a_b_B_c'])
endfunction

function! s:test(words, key, pattern, result)
	call s:patternTest(a:key, a:pattern)
	call s:completeTest(a:words, a:pattern, a:result)
	echo ' '
endfunction

function! s:patternTest(key, pattern)
	let origin = a:key
	let expected = a:pattern
	let actual = CreatePattern2(a:key)

	call s:assert(origin, expected, actual)
endfunction

function! s:completeTest(words, pattern, result)
	let origin = a:words
	let expected = a:result
	let actual = AddComplete(a:words, a:pattern)

	call s:assert(origin, expected, actual)
endfunction

function! s:assert(origin, expected, actual)
	if a:expected == a:actual
		echo 'OK | '
		echon a:origin
		echon ' -> '
		echon a:actual
	else
		echo 'NG | expected : '
		echon a:expected
		echo '     actual   : '
		echon a:actual
	endif
endfunction
