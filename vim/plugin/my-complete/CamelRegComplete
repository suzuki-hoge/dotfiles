" vim:set ft=vim:

setlocal completefunc=CamelRegComplete

inoremap <RIGHT> <C-x><C-u>

function! CamelRegComplete(findstart, base)
    if a:findstart
		return FindWordHeadPos()
    endif

    let words = FindWords()
	let pattern = CreatePattern(a:base)

	return CompleteAdd(words, pattern)
endfunction

function! FindWordHeadPos()
	let currentLine = strpart(getline('.'), 0, col('.') - 1)
	return match(currentLine, '[a-zA-Z*_]*$')
endfunction

function! FindWords()
python << EOM

pattern = re.compile(r'[A-Za-z_]*[A-Za-z_]')
words = lambda line: pattern.findall(line)

import vim
result = []
for buf in vim.buffers:
	for line in buf:
		result = result + words(line)

vim.command('return %s' % sorted(result))

EOM
endfunction

function! CreatePattern(base)
	if a:base == ''
		return '.*'
	else
		return CreateReg(a:base)
	endif
endfunction

function! CreateReg(base)
python << EOM

result = ''
firstUpper = True
for c in vim.eval('a:base'):
	if c.isupper():
		if firstUpper:
			firstUpper = False
			tmpformat = '%s.*%s.*'
		else:
			tmpformat = '%s%s.*'
	elif c == '*':
		tmpformat = '%s.%s'
	else:
		tmpformat = '%s%s'

	result = tmpformat % (result, c)


lastformat = '^%s$' if '*' in result else '^%s'

vim.command('return "%s"' % (lastformat % result))

EOM
endfunction

function! CompleteAdd(words, pattern)
    for word in a:words
		if word =~# a:pattern
			call complete_add({'word' : word})
		endif
    endfor
endfunction

source $mycomplete/CamelRegCompleteTest
